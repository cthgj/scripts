#!/usr/bin/perl

use Switch;
use Encode;
use Text::Wrap;
use Getopt::Std;

my $weatherline;

# This script was written by lvleph and inspired by the original conky weather script written by azhag (azhag@bsd.miki.eu.org)


# Modyfied by LazarusHC to list more details

# Modified by terdon
#getopts('l:,h',\%opts) || do { print "Invalid option\n"; usage(); };
my $offset=1;
my $location=$ARGV[0] || &usage(); #zipcode or weather.com city code
	my ($htemp,$ltemp);
# ($code,$code2)=split(/-/,$ARGV[0]); # weather.com and weather.noaa.gov codes
my $system =$ARGV[1]|| &usage(); #f for imperial c for metric
$what=$ARGV[2]|| &usage();  #what are we looking for?
$file="/tmp/weather.html"; #temp holding weather
$file1="/tmp/code.html"; #temp holding for weather.noaa.gov
my @lines;
$update=3600; #time in seconds to update $file if set to 0 don't use $file
my ($LOC,$code1,$code2);
$hleadspace="    "; #spacing before each high
$htrailspace="    "; #spacing after each high.

$lleadspace="       "; #spacing before each  low
$ltrailspace=" "; #spacing after each low.
$leadspace="   "; #spacing before each high low
$trailspace="    "; #spacing after each high low.
$fspaces="  "; #spacing between condition symbols.
$dspaces=""; #spacing between each day
$lines="\n\n\n\n"; #each \n represents one line between the days and temps

$Text::Wrap::columns = 58;
$initial_tab=""; #tab before first line in weather output
$subsequent_tab="\t"; #tab before each subsequet line in weather output

$degree= encode_utf8( "\x{00B0}" ); #give me the degree symbol, not everyone has same locale


#ensure user inputs proper system
if($system !=~ "c" || $system !=~ "f"){$what=0;} #this will give usage error 
## Get location
    
if($location =~ /bcn/i){
    $LOC="Barcelona";
    $code1="spain/catalonia/barcelona-753692";
    $code2="LEBL";
}
elsif($location=~ /ath/i){
    $LOC="Athens";
    $code1="greece/attiki/athens-946738";
    $code2="LGAV";
}
elsif($location=~ /mar/i){
    $LOC="Marseille";
    $code1="france/provence-alpes-cote-d%27azur/marseille-610264";
    $code2="LFML";
}
else{
    die("Unknown location $location, known locations are \"bcn\", \"mar\" and ath\"\n");
}

switch($what) {
    case "c" {
	&file_op; #save weather to $file
	while(<FILE>){ #cycle through file
	    if (/<dt>Feels Like:<\/dt>/){ #found feels like temp
		($tmf) = /([\+-\d]+)/; #sav temp
	    }
	    if (/<dt>Humidity:<\/dt>/){ #found current humidity
		($hmt) = /<dd>(\d+\s*\%)/; #save current humidity					
	
	    }
	    if (/<dt>Wind:<\/dt><dd>(.+?)<\/dd>/){ #found wind conditions
		($wnd) = $1; #save wind conditions
		#do we have current conditions?
	    }
	    if (/>Sunrise:</i){
		($sunrise) = /(\d+:\d+.+?)</; 
	    }
	    if  (/<dt>Sunset:<\/dt>/ .. /<dd>/){
		($sunset) = /(\d+:\d+.+?)</; 
	    }
	    
	    if( $tmf && $hmt && $wnd && $sunset && $sunrise){
		$realtemp="";
		open(FF, "$file1")||die("Can't open noaa weather file\n");
		while(<FF>){
		    /\((\d+)/;
		    $realtemp=$1;
		    
		}
		close(FF);
		print "   Temperature: $realtemp$degree ($tmf)\n";
		print "   Humidity:        $hmt\n"; 
		print "   Wind:              $wnd\n"; 
		print "   Sunrise:           $sunrise\n"; 
		print "   Sunset:            $sunset\n"; 	       
		
		exit;
	    }
	}
    }


case /[1-5]dp$/ { #display the conditions from today through day $days

		&file_op; #save weather to $file
		my $day=(split "dp", $what)[0]; #how many days are we looking for
		my $flag=0; #set flag for when we find start of conditions
		my $count=0; 
		while(<FILE>){
		    if(/class=\"fiveday/){$flag=1;$weatherline .=$_;} #found the start of conditions
		    
			#elsif($flag && /(\b.+\b)<\/td>/ && ++$count<=$day){ #look for the conditions upto specified day
		    elsif($flag && /^\s*<td/){
			$weatherline .=$_;
			$weatherline=~s/(\w+)-\n/$1/;
		# 	while((/-\n/) && ( $lines[$.]=~){
# 			    print "BEFORE : $_";
# 			    s/\s*(\w+)-\n/$1/;
# 			    $_ .= $lines[$.];
# 			    print "AFTER : $_\n";
			    
# 			}
			
		    }
		    elsif($flag && $weatherline=~ /<\/div><\/td>/ && ++$count<=$day){ #look for the conditions upto specified day
#		    elsif($weatherline=~/<\/div><\/td>/){ #look for the conditions upto specified day
			$weatherline .=$_;
			$weatherline=~s/\s*(\w+)-\n/$1/;
			@cnd=($weatherline=~/<br\/>(.+?)<\/div><\/td>/g);
			#print "aa \n$weatherline\n\n\n";
			#$cnd[$count-1]=$1; #save conditions
			#&cond_symb1 ($cnd[$count-1]); #translate conditions to symbol
			
			}
		    #elsif($count>=$day){#don't keep looking if everything has been found
		    elsif($flag && /SpaceID=0/){#don't keep looking if everything has been found 
			map{&cond_symb($_)}@cnd;
			#print "$ctext\n"; 
			exit;
		    } 
		    elsif(/fiveday-temps/){$flag=0}
		}
	}

    case /[1-5]d$/{
	&file_op; #save weather to $file
		my $count1 = my $count2=0;
		my $day=(split "dt", $what)[0]; #how many days are we looking for
		my $flag=0; #print days once
		
		while(<FILE>){ 
		    # $flag++ if /fiveday-temps/;
		    # next unless $flag>0;
		    #get the high temp
			(my $high) = /High:\s*(\d+)/;
			#get the low temp
			(my $low) = />Low:\s*(\d+)/;
			#print the high and low temp for the specified day
#			if(/<th>(\b.+\b)<\/th>/ && ++$count1<=$day){ #look for the conditions upto specified day
			if(/yw-fivedayforecast/ && ++$count1<=$day){ #look for the conditions upto specified daya
			    
			    $_=~/id=.yw-fivedayforecast..(.+nobg.>)/; 
			    $kk=$1;
			    $kk=~s/<.+?>/ /g;
			    $kk=~s/^\s+//;
			    @days=split(/\s+/,$kk);
			    #print "dd : @days\n";
			    map{&day_space($_); $count++; $count2++}@days;
			}
			elsif($high=~/\d+/ && $low=~/\d+/ && ++$count2<=$day){print "c : $count2\n";$ttext.=$leadspace.$high.$degree."-".$low.$degree.$trailspace;  }
elsif($count2>=$day){print "$dtext\n"; exit;} #don't keep looking if everything has been found
		}
    }
case /[1-5]dt/{
	&file_op; #save weather to $file
		my $count1 = my $count2=0;
		my $day=(split "dt", $what)[0]; #how many days are we looking for
		my $flag=1; #print days once
		
		while(<FILE>){
		    #get the high temp
			(my $high) = /High:\s*(\d+)/;
			#get the low temp
			(my $low) = />Low: \-?(\d+)/;
		
			## deal with 1 or 2 digit temps
			if(length($high)<2){$high=" ".$high; }
			if(length($low)<2){$low=" ".$low; }
			#print the high and low temp for the specified day
		
			#if(/<th>(\b.+\b)<\/th>/ && ++$count1<=$day){ #look for the conditions upto specified day
			  if(/class=\"fiveday-temps.>(.+)<div\sid=/){ 
			    $kk=$1;
			    $kk=~s/<.+?>/ /g;
			    $kk=~s/^\s+//;
			    $kk=~s/\&.+?\;//g;
			    #print "kk : -$kk-\n";
			    @temps=split(/\s+/,$kk);
			    @temps=grep(/\d+/,@temps);
			    for(my $nn=0;$nn<scalar(@temps);$nn+=2){
				print "      $temps[$nn]   ";
			    }
			    print "\n";
			    for(my $nn=1;$nn<scalar(@temps);$nn+=2){
				print "      $temps[$nn]   ";
			    }print "\n";
#			    map{&day_space($_); $count++; $count2++}@days;

			}
			elsif($high=~/\d+/ && $low=~/\d+/ && ++$count2<=$day){
			    $htemp.=$hleadspace.$high.$degree.$htrailspace;
			    $ltemp.=$lleadspace.$low.$degree.$ltrailspace; 
			   
			}
#			elsif($high=~/\d+/ && $low=~/\d+/ && ++$count2<=$day){$ttext.=$leadspace.$high.$degree."\n".$low.$degree.$trailspace ."\n";  }
			elsif($count2>=$day){print "$htemp\n  $ltemp\n$dtext"; exit;} #don't keep lopking if everything has been found

		}
    }
case /l/{
    print "$LOC\n";
}
    case /K/{

    }

}


sub file_op { #do file operations
	if(-e $file ){ #does the file exist and is not empty?
		my $size=`stat -c %s $file`;
		if($size >= 1000){
			my $date=`date -u +%s`; #get current date in seconds
			my $created=`stat -c %Y $file`; #get creation date of file in seconds
			$age=$date - $created; #determine age of file
		}
		else{
			$age=$update+1;
		}
	}
	else{ #if file doesn't exist make it and set to update the file
		`touch $file`;
		$age=$update+1;
	}
	$a=`ping -c 1 78.227.40.153`;
#only get a new file every hour and only if connected
	if (($age>=$update) && ($a !~/unknown/)){ 
		#obtain the weather forecast and store it in $file
	    `wget -O - http://weather.yahoo.com/$code1/?unit=c > $file`;
	    `wget -O - http://weather.noaa.gov/weather/current/$code2.html | grep  "C)" | head -1 > $file1`;	   

	}
	open(FILE, $file) or die "Could not open file $file: $!\n";
	@lines=<FILE>;
	close(FILE);
	open(FILE, $file) or die "Could not open file $file: $!\n";

}

sub usage { #if correct options haven't been passed usage error
		print "Usage error weather.pl <citycode> <system> <option>\n";
		print "weather.pl [lc] <option>\n";
		print "\t<citycode> : Location (bcn|ath|mar)\n";
		print "\t<system>   : c for metric or f for imperial\n";
		print "\t<option>   : Only one option can be entered at a time\n";
		print "\t\tc displays current conditions\n";
		print "\t\tw displays list of current conditions\n";
		print "\t\tcp displays current conditions symbol\n";
		print "\t\tt displays current temp in chosen system\n";
		print "\t\t[1-5]d displays the days up to specified day\n"; 
		print "\t\t[1-5]dp displays condition symbol for days up to specified day\n";
		print "\t\t[1-5]t displays high/low temp in chosen system up to specified day\n";
		print "\t\t[1-5]dt displays days and then high/low temp in chosen system up to specified day\n";
		print "\t\t[1-7]w displays the weather in words up number specified\n";
		print "\t\t[1-5]p displays conditions for specified day\n";
		print "\t\t[1-5] displays high/low temp in chosen system for specified day\n";
}



sub cond_symb { #translates conditions into symbol in weather font
    # if ($_ =~ "Partly Cloudy"){$_="c";}
    # elsif($_ =~ /Mostly\sSunny/ || $_ =~ /Mostly\sClear/ ){$_="B"}
    # elsif ($_ =~ /Mostly\sCloudy/){$_="d";}
    # elsif ($_ =~ "Cloud" || $_ =~ "Fog"){$_="e";}
    # elsif ($_ =~ "Storm" || $_ =~ "Thunder" || $_ =~ "T-"){$_="i";}
    # elsif ($_ =~ "Snow" || $_ =~ "Flurries" || $_ =~ "Wintry"){$_="k";}
    # #elsif(/Shower/ && /Wind/){$_="f"}
    # elsif ($_ =~ "Fair"  || $_ =~ "Sunny"|| $_ =~ "Sun" || $_ =~ "Clear"){$_="A";}
    # elsif(/Scattered\sShowers/){$_="g"}
    # elsif ($_ =~ /Rain/ || /Drizzle/){$_="i";}
    # elsif ($_ =~ /Shower/){$_="h"; }
    if ($_ =~ "Partly Cloudy"){$_="/home/terdon/conkyimages/partly_cloudy.gif";}
     elsif ($_ =~ /Wind/ ){$_="/home/terdon/conkyimages/wind.gif";}
    elsif($_ =~ /Mostly\sSunny/ || $_ =~ /Mostly\sClear/ ){$_="/home/terdon/conkyimages/mostly_sunny.gif"}
    elsif ($_ =~ /Mostly\sCloudy/){$_="/home/terdon/conkyimages/cloudy.gif";}
    elsif ($_ =~ "Cloud" || $_ =~ "Fog"){$_="/home/terdon/conkyimages/cloudy.gif";}
    elsif ($_ =~ "Storm" || $_ =~ "Thunder" || $_ =~ "T-"){$_="/home/terdon/conkyimages/storm.gif";}
    elsif ($_ =~ "Snow" || $_ =~ "Flurries" || $_ =~ "Wintry"){$_="/home/terdon/conkyimages/snow.gif";}
    #elsif(/Shower/ && /Wind/){$_="f"}
    elsif ($_ =~ "Fair"  || $_ =~ "Sunny"|| $_ =~ "Sun" || $_ =~ "Clear"){$_="/home/terdon/conkyimages/sunny.gif";}
    elsif(/Scattered\sShowers/){$_="/home/terdon/conkyimages/showers.gif"}
    elsif ($_ =~ /Rain/ || /Drizzle/){$_="/home/terdon/conkyimages/rain.gif";}
    elsif ($_ =~ /Shower/){$_="/home/terdon/conkyimages/shower.gif"; }
    $ctext.="\${image " . $_ . " -p $offset,755}\n";
    $imgname="image" . $offset . ".gif";
    $offset++;
    system("rm /home/terdon/conkyimages/$imgname; ln -s $_ /home/terdon/conkyimages/$imgname");
    print STDERR "rm /home/terdon/conkyimages/$imgname; ln -s $_ /home/terdon/conkyimages/$imgname\n";
}

sub day_space { #Adds spaces for aligment


	if ($_ =~ "Today")      {$_="  Tdy      ";}
# 	elsif ($_ =~ "Tonight"){$_="Tonight  ";}
# 	elsif ($_ =~ "Tomorrow"){$_=" Tomorrow";}
	elsif ($_ =~ "Tonight") {$_="  Tng      ";}
	elsif ($_ =~ "Tomorrow"){$_="  Tmr   ";}
	elsif ($_ =~ "Thu")     {$_="     Thu  ";}
	elsif ($_ =~ "Fri")     {$_="     Fri  ";}
	elsif ($_ =~ "Sat")     {$_="     Sat  ";}
	elsif ($_ =~ "Sun")     {$_="     Sun  ";}
	elsif ($_ =~ "Mon")     {$_="     Mon  ";}
	elsif ($_ =~ "Tue")     {$_="     Tue  ";}
	elsif ($_ =~ "Wed")     {$_="     Wed  ";}
	$dtext.=$_.$dspaces;

}


